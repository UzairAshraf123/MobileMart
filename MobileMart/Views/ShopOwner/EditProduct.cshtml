@model MobileMart.DB.ViewModel.EditProductViewModel

@{
    ViewBag.Title = "Edit Product";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
<h2>Update Product</h2>
<h3 class="alert">@ViewBag.message</h3>
@using (Html.BeginForm("EditProduct", "ShopOwner", FormMethod.Post,
                                    new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />

        <input type="hidden" name="CreatedOn" value="@System.DateTime.Now" />
        <input type="hidden" name="ProductID" value="@Model.ProductID" />
        <input type="hidden" name="ShopID" value="@Model.ShopID" />
        <input type="hidden" name="SupplierID" value="@Model.SupplierID" />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.CategoryID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(Model => Model.CategoryID,
                    (SelectList)ViewBag.CategoryDropDown,
                    "--Select Category--",
                    new { @class = "form-control", @id = "SelectedCatogory" })
                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SubCategoryID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.SubCategoryID,
               new SelectList(string.Empty, "Value", "Text"),
               "--Select Sub-Category--",
               new { @class = "form-control", @id = "SubCategory" })
                @Html.ValidationMessageFor(model => model.SubCategoryID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CompanyID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.CompanyID,
               (SelectList)ViewBag.CompanyDropDown,
               "--Select Category--",
               new { @class = "form-control", @id = "SelectedCompany" })
                @Html.ValidationMessageFor(model => model.CompanyID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2"></label>
            <div class="col-md-10">
                @Html.RadioButtonFor(model => model.IsOld, "false", new { htmlAttributes = new { @class = "form-control" } })
                <label class="label label-default">New</label>
                @Html.RadioButtonFor(model => model.IsOld, "true", new { htmlAttributes = new { @class = "form-control" } })
                <label class="label label-default">Old</label>
                @Html.ValidationMessageFor(model => model.IsOld, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group ">
            <label class="control-label col-md-2">Upload Product Images</label>
            <div class="col-md-10">
                <div id="imgpreview1" class="col-md-3 img-thumbnail image-preview">
                    <label for="image-upload" id="image-label" class="image-preview-label">
                        <span><i class="glyphicon glyphicon-plus"></i></span>
                    </label>
                    @Html.TextBoxFor(m => m.ProductImage1, new { Type = "File", @id = "image-upload", @class = "image-preview-input", onchange = "showpreview(this, 1)" })
                    @*<input type="file" name="ProductImage1" value="ProductImage1" id="image-upload" class="image-preview-input" onchange="showpreview(this, 1)" />*@
                </div>
                <div id="imgpreview2" class="col-md-3 img-thumbnail image-preview">
                    <label for="image-upload" id="image-label" class="image-preview-label">
                        <span><i class="glyphicon glyphicon-plus"></i></span>
                    </label>
                    @Html.TextBoxFor(m => m.ProductImage2, new { Type = "File", @id = "image-upload", @class = "image-preview-input", onchange = "showpreview(this, 2)" })
                    @*<input type="file" name="ProductImage2" value="ProductImage2" id="image-upload" class="image-preview-input" onchange="showpreview(this, 2)" />*@
                </div>
                <div id="imgpreview3" class="col-md-3 img-thumbnail image-preview">
                    <label for="image-upload" id="image-label" class="image-preview-label">
                        <span><i class="glyphicon glyphicon-plus"></i></span>
                    </label>
                    @Html.TextBoxFor(m => m.ProductImage3, new { Type = "File", @id = "image-upload", @class = "image-preview-input", onchange = "showpreview(this, 3)" })
                    @*<input type="file" name="ProductImage3" value="ProductImage3" id="image-upload" class="image-preview-input" onchange="showpreview(this, 3)" />*@
                </div>
                <div id="imgpreview4" class="col-md-3 img-thumbnail image-preview">
                    <label for="image-upload" id="image-label" class="image-preview-label">
                        <span><i class="glyphicon glyphicon-plus"></i></span>
                    </label>
                    @Html.TextBoxFor(m => m.ProductImage4, new { Type = "File", @id = "image-upload", @class = "image-preview-input", onchange = "showpreview(this, 4)" })
                    @*<input type="file" name="ProductImage4" value="ProductImage4" id="image-upload" class="image-preview-input" onchange="showpreview(this, 4)" />*@
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductDetail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductDetail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductDetail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IMEI, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IMEI, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IMEI, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (Model.IMEI != null) {
            <div class="form-group">
                @Html.LabelFor(model => model.IMEI, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.IMEI, new { htmlAttributes = new { @class = "form-control IMEI", @placeholder = "1-0" } })
                    @Html.ValidationMessageFor(model => model.IMEI, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="update" class="btn btn-default" />
            </div>
        </div>
    </div>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <script src="~/Scripts/jquery-3.1.1.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    @Scripts.Render("~/bundles/jqueryval")
    
    <script type="text/javascript">
        function showpreview(input, num) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    var loadedFile = e.target;
                    $('#imgpreview' + num).css("background-image", "url(" + loadedFile.result + ")");
                    $('#imgpreview' + num).css("background-size", "cover");
                    $('#imgpreview' + num).css("background-position", "center center");
                };
                reader.readAsDataURL(input.files[0]);
            }
        }
        $(document).ready(function () {
            $('#AddProductForm').trigger("reset");
            $(".OldProduct").attr("checked", false);
            $(".NewProduct").attr("checked", false);
            @*var url1 = '@Model.ProductImagePath1'.replace(/~/g, '');
            var url2 = '@Model.ProductImagePath2'.replace(/~/g, '');
            var url3 = '@Model.ProductImagePath3'.replace(/~/g, '');
            var url4 = '@Model.ProductImagePath4'.replace(/~/g, '');

            $('#imgpreview1').css("background-image", "url(" + url1 + ")");
            $('#imgpreview2').css("background-image", "url(" + url2 + ")");
            $('#imgpreview3').css("background-image", "url(" + url3 + ")");
            $('#imgpreview4').css("background-image", "url(" + url4 + ")");
            $('.image-preview' ).css("background-size", "cover");
            $('.image-preview' ).css("background-position", "center center");*@

            $("#SelectedCatogory").change(function () {
                var categoryId = $('#SelectedCatogory').val();
                $.ajax({
                    url: "/Ajax/GetSubCategory",
                    type: "POST",
                    //contentType: "application/json; charset=utf-8",
                    //datatype: 'JSON',
                    data: { categoryID: categoryId },
                    success: function (data) {
                        $('#SubCategory').empty();
                        for (var i = 0; i < data.subCategory.length; i++) {
                            $('#SubCategory').append("<option value= " + data.subCategory[i].Value + ">" + data.subCategory[i].Text + "</option>");
                        }
                    }
                });
            });

            $("#SelectedCatogory").change(function () {
                var category = $('#SelectedCatogory').val();
                if (category == 2) {
                    $('#SubCategory').prop("disabled", true);
                    $(".OldProduct").attr("checked", false);
                    $(".OldProduct").attr("disabled", true);
                    $('.NewProduct').attr("checked", true);
                    $('.NewProduct').val(true);
                    $('.OldProduct').val(false);
                    $('.IMEI').prop("disabled", true);
                } else if (category == 1) {
                    $('#SubCategory').prop("disabled", false);
                    $(".OldProduct").attr("disabled", false);
                    $('.IMEI').prop("disabled", false);
                    $('.NewProduct').attr("checked", false);
                }
            });

            $('.NewProduct').change(function () {
                if ($(this).is(':checked') && $('#SelectedCatogory').val() == 1) {
                    $('.IMEI').prop("disabled", false);
                } else {
                    $('.IMEI').prop("disabled", true);
                }
            });
        });

    </script>
}
